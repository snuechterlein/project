class User(object):

    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.books = {}

    def get_email(self):
        return self.email

    def change_email(self, address):
        address = self.email
        print("The email address has been updated to {}".format(self.email))

    def __repr__(self):
        return "Username: {}, Email Address: {}, and Number of Books Read: {}".format(self.name, self.email, len(self.books))

    def __eq__(self, other_user):
        if self.name == other_user.name and self.email == other_user.email:
                return True
        return False

    def read_book(self, book, rating = None):
        self.books[book.title] = rating

    def get_average_rating(self):
        average = 0
        count = 0
        for book in self.books:
            if self.books[book] != None:
                average += self.books[book]
                count += 1
            if average != 0:
                average = average / count
        return average

class Book(object):

    def __init__(self, title, isbn):
        self.title = title
        self.isbn = isbn
        self.ratings = []

    def __hash__(self):
        return hash((self.title, self.isbn))

    def __eq__(self, other_book):
        if self.title == other_book.title and self.isbn == other_book.isbn:
            return True
        else:
            return False
    # repersent
    def __repr__(self):
        return "Title: {title} ISBN: {isbn}".format(title = self.title, isbn = self.isbn)

    def get_title(self):
        return self.title

    def get_isbn(self):
        return self.isbn

    def set_isbn(self, new_isbn):
        new_isbn = self.isbn
        print("The ISBN of the book titled {} has been updated to {}.".format(self.title, self.isbn))

    def add_rating(self, rating):
        if rating != None:
            if 0 <= rating <= 4:
                self.ratings.append(rating)
            else:
                print("Invalid Rating")

    def get_average_rating(self):
        average = 0
        count = 0
        if len(self.ratings) > 0:
            for rating in self.ratings:
                average += rating
                count += 1
            average = average / count
        return average

class Fiction(Book):

    def __init__(self, title, author, isbn):

        super().__init__(title, isbn)
        self.author = author

    def __repr__(self):
        return "{} by {}".format(self.title, self.author)

    def get_author(self):
        return self.author

class Non_Fiction(Book):

    def __init__(self, title, subject, level, isbn):

        super().__init__(title, isbn)
        self.subject = subject
        self.level = level

    def __repr__(self):
        return "{}, a {} manual on {}.".format(self.title, self.level, self.subject)

    def get_subject(self):
        return self.subject

    def get_level(self):
        return self.level

class TomeRater(object):

    def __init__(self):
        self.users = {}
        self.books = {}

    def create_book(self, title, isbn):
        new_book = Book(title, isbn)
        return new_book

    def create_novel(self, author, title, isbn):
        new_novel = Fiction(author, title, isbn)
        return new_novel

    def create_non_fiction(self, title, subject, level, isbn):
        new_non_fiction = Non_Fiction(title, subject, level, isbn)
        return new_non_fiction

    def add_user(self, name, email, user_books = None):
        new_user = User(name, email)
        self.users[email] = new_user
        if user_books != None:
            for book in user_books:
                self.add_book_to_user(book,email)

    def add_book_to_user(self, book, email, rating = None):
        user = self.users.get(email, None)
        if user:
            user.read_book(book, rating)
            book.add_rating(rating)
            if book in self.books:
                self.books[book]+= 1
            else:
                self.books[book] = 1
        else:
            print("No user with email {}!".format(self.email))

    def print_catalog(self):
        for books in self.books:
            print(books)

    def print_users(self):
        for users in self.users.values():
            print(users)

    def most_read_book(self):
        most_read_count = 0
        most_read = None
        for book in self.books:
            if self.books[book] > most_read_count:
                most_read_count = self.books[book]
                most_read =book
        return most_read

    def highest_rated_book(self):
        highest_rating = 0
        high_rated_book = None
        for book in self.books:
            if book.get_average_rating() > highest_rating:
                highest_rating = book.get_average_rating()
                high_rated_book = book
        return high_rated_book

    def most_positive_user(self):
        most_positive = 0
        positive_user = None
        for user in self.users.values():
            if user.get_average_rating() > most_positive:
                most_positive = user.get_average_rating()
                positive_user = user
        return positive_user

Tome_Rater = TomeRater()

#Create some books:
book1 = Tome_Rater.create_book("Society of Mind", 12345678)
novel1 = Tome_Rater.create_novel("Alice In Wonderland", "Lewis Carroll", 12345)
novel1.set_isbn(9781536831139)
nonfiction1 = Tome_Rater.create_non_fiction("Automate the Boring Stuff", "Python", "beginner", 1929452)
nonfiction2 = Tome_Rater.create_non_fiction("Computing Machinery and Intelligence", "AI", "advanced", 11111938)
novel2 = Tome_Rater.create_novel("The Diamond Age", "Neal Stephenson", 10101010)
novel3 = Tome_Rater.create_novel("There Will Come Soft Rains", "Ray Bradbury", 10001000)

#Create users:
Tome_Rater.add_user("Alan Turing", "alan@turing.com")
Tome_Rater.add_user("David Marr", "david@computation.org")

#Add a user with three books already read:
Tome_Rater.add_user("Marvin Minsky", "marvin@mit.edu", user_books=[book1, novel1, nonfiction1])

#Add books to a user one by one, with ratings:
Tome_Rater.add_book_to_user(book1, "alan@turing.com", 1)
Tome_Rater.add_book_to_user(novel1, "alan@turing.com", 3)
Tome_Rater.add_book_to_user(nonfiction1, "alan@turing.com", 3)
Tome_Rater.add_book_to_user(nonfiction2, "alan@turing.com", 4)
Tome_Rater.add_book_to_user(novel3, "alan@turing.com", 1)

Tome_Rater.add_book_to_user(novel2, "marvin@mit.edu", 2)
Tome_Rater.add_book_to_user(novel3, "marvin@mit.edu", 2)
Tome_Rater.add_book_to_user(novel3, "david@computation.org", 4)


#Uncomment these to test your functions:
Tome_Rater.print_catalog()
Tome_Rater.print_users()

print("Most positive user:")
print(Tome_Rater.most_positive_user())
print("Highest rated book:")
print(Tome_Rater.highest_rated_book())
print("Most read book:")
print(Tome_Rater.most_read_book())
